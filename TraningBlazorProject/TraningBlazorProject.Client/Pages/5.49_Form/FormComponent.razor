@page "/FormComponent"
@using System.ComponentModel.DataAnnotations
@using TraningBlazorProject.Client.Common
@using TraningBlazorProject.Client.Common.Class_Extensions
@using TraningBlazorProject.Client.Pages._5_49_Form.CustomCssValidation
<h3>FormComponent</h3>
@rendermode InteractiveServer
@*
     [SupplyParameterFromForm] => مشخص می کند اطلاعات prop 
     از فرم می آید
     یعنی 
         private Product product { get; set; }
فقط مربوط به فرم است
-----------------------------------------
app.UseAntiforgery(); => این متد در فایل program.cs
است و کاری که می کند این است که به فرم های ما یک شناسه در یک 
input hidden اضافه می کند
که مطمعن شود این فرم از طریق برنامه ما ارسال شده و جعل فرم صورت نگرفته برای امنیت بیشتر
و جلوگیری از حملات هکرها
 برای استفاده ار آن حتما باید از
     <AntiforgeryToken/>
در فرم خود استفاده کنیم
-----------------------------------------
@formname = سعی کن همیشه نام برای فرم ها انتخاب کنی
-----------------------------------------
data-enhance => این متد باعث می شود وقتی فرم submit 
شد مثل اپلیکشین های single page
باشد و صفحه رفرش نشود
-----------------------------------------
@onsubmit => وقتی فرم submit شد این متد صدا زده می شود
-----------------------------------------
EditForm => این یک کامپوننت بلیزور برای فرم است که کار فرم را انجام می دهد
----------------------------------------
EditForm
چند  پارامتر دارد
Model => مدلی که می خواهیم از آن استفاده کنیم
FormName => نام فرم
onValidSubmit => وقتی فرم Valid باشد این متد صدا زده می شود -
یعنی همه اعتبار سنجی های فرم انجام شده  باشد اجازه ارسال فرم می دهد
onInvalidSubmit => وقتی فرم Valid نباشد این متد صدا زده می شود
onsubmit => وقتی فرم submit شد این متد صدا زده می شود

در فرم نمی شود همزمان از 3 متد بالا استفاده کرد
یا باید از onsubmit استفاده کنیم
یا از دو متد onValidSubmit وonInvalidSubmit
----------------------------------------
InputText => این یک کامپوننت بلیزور برای Input Text است که کار Input Text را انجام می دهد
----------------------------------------
validation =>
ایتدا از  [Required] و این مدل اتیبیوت ها استفاده می کنیم
سپس از     <DataAnnotationsValidator />
در فرم استفاده می کنیم
از OnValidSubmit استفاده می کنیم که وقتی فرم
valid شد ارسال کند
    <ValidationSummary/> => نمایش خطا ها
 ----------------------------------------
 در input component ها
 DisplayName => نام فیلد است که در خطا ها نمایش داده می شود
 ParsingErrorMessage => پیام خطا برای وقتی که کاربر یک مقدار نا معتبر وارد کند
 ---------------------------------------

 Nest method => دقیقا مثل partail View ها است

 ---------------------------------------
 EditContext => این یک کلاس بلیزور است که اطلاعات فرم را نگهداری می کند
 هر فرمی یک EditContext
 دارد که شامل model 
 ما هست و وضعیت فرم و اعتبار سنجی فرم را انجام می دهد
 میتوانیم آن را در ورودی های متد های
 onsubmit و onInvalidSubmit وonValidSubmit 
 بگیریم و از آن استفاده کنیم
 ----------------------------------------
 Custom Validation 5.59=> اگر بخواهیم اعتبار سنجی های خود را انجام دهیم
 ValidationMessage => اگر بخاهیم خطای هر فیلد را دقیقا زیر همان فیلد و به صورت جداگانه برای همان فیلد نمایش دهیم
 ValidationMessageStore => اگر بخاهیم یک سری پیام هایی به پیام های خطاهای فرم اضافه کنیم برای وقتی که میخواهیم 
  Custom Validation هایی روی
  فرم خود بنویسیم

  کدهای مربوط به CustomValidationForm
  در کامپوننت CustomValidationForm نوشتم
  ----------------------------------------
  Custom Css For Validation => با توجه به این قابلیت میتوانیم css ها  و استایل های
  خود را برای خطا های اعتبار سنجی بنویسیم
  کد های مربوط به CustomCssValidationForm
  در کامپوننت CustomCssValidationForm نوشتم

*@



<form method="post" @formname="formExample" data-enhance @onsubmit="OnSubmit">
    <AntiforgeryToken />
    <div class="form-group">
        <label>نام محصول</label>
        <input class="form-control" type="text" @bind="product!.Name" />
    </div>
    <button type="submit">Submit</button>
</form>
<hr />

<EditForm Model="product" FormName="EditForm-product" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit" Enhance>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>نام محصول</label>
        <InputText class="form-control" @bind-value="product!.Name" DisplayName=" نام محصول"></InputText>
    </div>

    <div class="form-group">
        <label>توضیحات محصول</label>
        <InputTextArea class="form-control" @bind-value="product!.Description" DisplayName=" توضیحات محصول"></InputTextArea>
    </div>


    <div class="form-group">
        <label>دسته بندی محصول</label>
        <InputRadioGroup @bind-Value="product.Category" class="form-control" DisplayName="دسته بندی محصول">
            <InputRadio Value="Category.Electric" />برقی
            <InputRadio Value="Category.Food" />خوراکی
            <InputRadio Value="Category.Clothes" />پوشاک
        </InputRadioGroup>
    </div>


    <div class="form-group">
        <label>گارانتی محصول</label>
        <InputSelect @bind-Value="product.WarrentyType" class="form-control" DisplayName="گارانتی محصول">
            <option value="" disabled>انتخاب کنید</option>
            <option value="1">یک ساله</option>
            <option value="2">دو ساله</option>
            <option value="3">سه ساله</option>
        </InputSelect>
    </div>


    <div class="form-group">
        <label>در دسترسی محصول</label>
        <InputCheckbox @bind-Value="product.IsAvailable" DisplayName="در دسترسی محصول"></InputCheckbox>
    </div>

    <div class="form-group">
        <label>تاریخ محصول</label>
        <InputDate @bind-Value="product.ExpireDate" class="form-control" DisplayName="تاریخ محصول" />
    </div>



    <div class="form-group">
        <label>تعداد محصول</label>
        <InputNumber @bind-Value="product.Quantity" class="form-control" DisplayName="تعداد محصول"></InputNumber>
    </div>

    <div class="form-group">
        <label>قیمت محصول</label>
        <InputNumber @bind-Value="product.Price" class="form-control" DisplayName="قیمت محصول"
        ParsingErrorMessage="لطفا {0} را وارد کنید"></InputNumber>
    </div>

    <hr />
    <div class="form-group">
        <label>رنگ محصول</label>

        @for (int i = 0; i < product.Colors.Count; i++)
        {
            int index = i;
            <div class="mt-3 mb-3">
                <InputText @bind-Value="product.Colors[index]" class="form-control mt-2 mb-2" />
                <button class="btn btn-danger btn-sm" @onclick="()=> RemoveColor(index)">Remove Color</button>
            </div>
        }
        <button class="btn btn-success btn-sm" @onclick="AddColor">Add Color</button>
    </div>
    <hr />
    <div class="form-group">
        <label>وضعیت  محصول</label>

        <InputSelect @bind-Value="product.StockStatus" DisplayName="وضعیت  محصول" class="form-control">

            @foreach (StockStatus stockStatus in Enum.GetValues(typeof(StockStatus)))
            {
                <option value="@stockStatus">@stockStatus.GetDisplayName()</option>
            }
        </InputSelect>
    </div>
    <hr />
    <div class="form-group">
        <label>جزییات  محصول</label>

        <div class="form-group">
            <label>ویژگی محصول</label>
            <InputTextArea @bind-Value="product.ProductDetails.Feature" class="form-control" />
        </div>

        <div class="form-group">
            <label>ویژگی محصول</label>
            <InputNumber @bind-Value="product.ProductDetails.Weight" class="form-control" />
        </div>

        <NestDimensions @bind-Value="product.ProductDetails.Dimensions" />
    </div>
    <hr />

    <button type="submit" class="btn btn-sm btn-primary mt-5 mb-5">Submit</button>
</EditForm>
<hr />
<CustomValidationForm></CustomValidationForm>
<hr />
<CustomCssValidationForm></CustomCssValidationForm>
@code {

    [SupplyParameterFromForm]
    private Product product { get; set; }


    protected override void OnInitialized()
    {
        if (product == null)
        {
            product = new();
        }
    }

    private void OnSubmit()
    {
        Console.WriteLine(product.Name);
        foreach (var color in product.Colors)
        {
            Console.WriteLine($"{color}");
        }

    }

    private void RemoveColor(int index)
    {
        if (index >= 0 && index < product.Colors.Count)
        {
            product.Colors.RemoveAt(index);
        }
    }

    private void AddColor()
    {
        product.Colors.Add("");
    }
    private void OnInvalidSubmit(EditContext context)
    {
        if (context.Validate())
        {

        }
        else
        {
            var errorMessage = context.GetValidationMessages();
        }

        var productNameFiled = context.Field(nameof(product.Name));
        var isChaned = context.IsModified(productNameFiled);
        Console.WriteLine($"آیا فیلد {productNameFiled} توسط کاربر ویرایش شده است ؟ {isChaned}");
    }
    private void OnValidSubmit(EditContext context)
    {
        throw new NotImplementedException();
    }
   
}

@code {
    public class Product
    {
        [Required]
        [StringLength(maximumLength: 6)]
        public string Name { get; set; } = default!;
        public string? Description { get; set; }
        public Category Category { get; set; }
        public string? WarrentyType { get; set; }
        public decimal Price { get; set; }
        public int? Quantity { get; set; }
        public DateTime ExpireDate { get; set; }
        public bool IsAvailable { get; set; }
        public List<string> Colors { get; set; } = new();
        public StockStatus StockStatus { get; set; }
        public ProductDetails ProductDetails { get; set; } = new();
    }

    public class ProductDetails
    {
        public string? Feature { get; set; }
        public double? Weight { get; set; }
        public Dimensions Dimensions { get; set; } = new();
    }

    public class Dimensions
    {
        public double? Height { get; set; }
        public double? Width { get; set; }
        public double? Depth { get; set; }
    }
    public enum Category
    {
        Electric,
        Food,
        Clothes
    }

    public enum StockStatus
    {
        [Display(Name = "موجودی انبار")]
        InStock,
        [Display(Name = "خارج از انبار")]
        OutOfStock,
        [Display(Name = "اتمام محصول")]
        Finished,
        [Display(Name = "موجود نیست")]
        Discontinued
    }


   
}
 