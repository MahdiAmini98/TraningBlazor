@page "/TypedHttpClientPatternListTodos"
@using Microsoft.AspNetCore.JsonPatch
@using TraningBlazorProject.Client.Services.NamedHttpClientPattern.TodoServices
@using TraningBlazorProject.Client.Services.TypedHttpClientPattern.TodoServices
<h3>TypedHttpClientPatternListTodos</h3>
@*
    تفاوت این کد با NamedHttpClientPattern
    با 
    TypedHttpClientPattern 
    این است که
    NamedHttpClientPattern برای پروژه های کوچک
    وTypedHttpClientPattern 
    برای پروژه های  بزرگ است
    در پروژه های بزرگ تر که با 
    TypedHttpClientPattern انجام می شود
    با یک ساختار کلاسی این کار انجام می شود که بهتر است
    در 
    ServiceRegistration
    سرویس 
    http client
    اضافه شده و سروس
    ITodoTypedService
*@


@rendermode InteractiveWebAssembly
@attribute [StreamRendering]
@inject NavigationManager Navigation;
@inject IJSRuntime JSRuntime;
@inject ITodoTypedService TodoTypedService;

<h3>To-Do List</h3>

@if (todos == null)
{
    <div class="alert alert-info" role="alert">
        <p>Loading...</p>
    </div>
}
else if (todos.Count == 0)
{
    <div class="alert alert-warning" role="alert">
        <p>No To-Do items found.</p>
    </div>
}
else
{
    <table class="table table-striped table-hover mt-3">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Title</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in todos)
            {
                <tr>
                    <td>@todo.Id</td>
                    <td>@todo.Title</td>
                    <td>
                        <input type="checkbox"
                               checked="@todo.IsCompleted"
                             />
                    </td>
                    <td>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<NavLink class="btn btn-success mt-3" href="NamedHttpClientPatternCreateTodoPage">Create New ToDo</NavLink>


@code {
    private List<Todo>? todos;
    protected override async Task OnInitializedAsync()
    {
        todos = await TodoTypedService.GetTodosAsync();
    }

}
