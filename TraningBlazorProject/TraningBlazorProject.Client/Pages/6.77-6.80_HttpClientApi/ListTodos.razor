@page "/ListTodos"
@using Microsoft.AspNetCore.JsonPatch
@inject HttpClient Http
@rendermode InteractiveWebAssembly
@attribute [StreamRendering]
@inject NavigationManager Navigation;
@inject IJSRuntime JSRuntime;

<h3>To-Do List</h3>

@if (todos == null)
{
    <div class="alert alert-info" role="alert">
        <p>Loading...</p>
    </div>
}
else if (todos.Count == 0)
{
    <div class="alert alert-warning" role="alert">
        <p>No To-Do items found.</p>
    </div>
}
else
{
    <table class="table table-striped table-hover mt-3">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Title</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in todos)
            {
                <tr>
                    <td>@todo.Id</td>
                    <td>@todo.Title</td>
                    @*  <td>@(todo.IsCompleted ? "Completed" : "Pending")</td> *@

                    <td>
                        <input type="checkbox"
                               checked="@todo.IsCompleted"
                               @onchange="()=> UpdateStatus(todo.Id,!todo.IsCompleted)" />
                    </td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditTodo(todo.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(todo.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<NavLink class="btn btn-success mt-3" href="create-todo">Create New ToDo</NavLink>


@code {
    private List<Todo>? todos;
    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("https://localhost:7215/api/Todo");

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();

            todos = System.Text.Json.JsonSerializer
            .Deserialize<List<Todo>>(jsonResponse, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                });
        }
        else
        {
            Console.WriteLine($"Error: {response.StatusCode}");
        }
    }

    private void EditTodo(int id)
    {
        Navigation.NavigateTo($"edit-todo/{id}");
    }

    private async Task ConfirmDelete(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"آیا مطمئن هستید که می‌خواهید تسک با شناسه {id} را حذف کنید؟");
        if (confirmed)
        {
            await DeleteTodo(id);
        }
    }

    private async Task DeleteTodo(int id)
    {
        var requestUri = $"https://localhost:7215/api/Todo/{id}";

        var request = new HttpRequestMessage(HttpMethod.Delete, requestUri);

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            todos?.RemoveAll(p => p.Id == id);
        }
        else
        {
            Console.WriteLine($"Error deleting: {response.StatusCode}");

        }

    }



    private async Task UpdateStatus(int id, bool newStatus)
    {

        var patchDocument = new JsonPatchDocument<Todo>();
        patchDocument.Replace(t => t.IsCompleted, newStatus);

        var jsonContent = new StringContent(
            Newtonsoft.Json.JsonConvert.SerializeObject(patchDocument),
        Encoding.UTF8,
        "application/json");




        var request = new HttpRequestMessage(HttpMethod.Patch, $"https://localhost:7215/api/Todo/{id}")
            {
                Content = jsonContent,
            };


        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {

        }
        else
        {
            Console.WriteLine($"Error {response.StatusCode}");
        }
    }



    public class Todo
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public bool IsCompleted { get; set; }
    }
}
