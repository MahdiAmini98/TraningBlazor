@page "/JsonHelperListTodos"
 @using Microsoft.AspNetCore.JsonPatch
@inject HttpClient Http
@rendermode InteractiveWebAssembly
@attribute [StreamRendering]
@inject NavigationManager Navigation;
@inject IJSRuntime JSRuntime;
<h3>JsonHelper</h3>
@*
    JsonHelper => تعدادی اکستنشن متد است که برای
    httpclient 
    ها نوشته شده است که میتوانیم درخواست های
    httpclient را با 
    کد های خیلی کمتری بنویسیم
    ولی در پس زمینه برای ارسال درخواست ها از
    httpclient استفاده میکند
    برای استفاده باید حتما 
    @using System.Net.Http.Json
اضافه کنیم به 
فایل
    _Imports.razor
    و این فایل در پوشه
    TraningBlazorProject.Client
    قرار دارد
*@


<h3>To-Do List</h3>

@if (todos == null)
{
    <div class="alert alert-info" role="alert">
        <p>Loading...</p>
    </div>
}
else if (todos.Count == 0)
{
    <div class="alert alert-warning" role="alert">
        <p>No To-Do items found.</p>
    </div>
}
else
{
    <table class="table table-striped table-hover mt-3">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>Title</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in todos)
            {
                <tr>
                    <td>@todo.Id</td>
                    <td>@todo.Title</td>
                    @*  <td>@(todo.IsCompleted ? "Completed" : "Pending")</td> *@

                    <td>
                        <input type="checkbox"
                               checked="@todo.IsCompleted"
                               @onchange="()=> UpdateStatus(todo.Id,!todo.IsCompleted)" />
                    </td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditTodo(todo.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(todo.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<NavLink class="btn btn-success mt-3" href="JsonHelperCreateTodoPage">Create New ToDo</NavLink>


@code {
    private List<Todo>? todos;
    protected override async Task OnInitializedAsync()
    {
        todos = await Http.GetFromJsonAsync<List<Todo>>("https://localhost:7215/api/JsonHelperTodo");
    }

    private void EditTodo(int id)
    {
        Navigation.NavigateTo($"JsonHelperEditTodoPage/{id}");
    }

    private async Task ConfirmDelete(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"آیا مطمئن هستید که می‌خواهید تسک با شناسه {id} را حذف کنید؟");
        if (confirmed)
        {
            await DeleteTodo(id);
        }
    }

    private async Task DeleteTodo(int id)
    {
        var requestUri = $"https://localhost:7215/api/JsonHelperTodo/{id}";
        var response = await Http.DeleteAsync(requestUri);

        if (response.IsSuccessStatusCode)
        {
            todos?.RemoveAll(p => p.Id == id);
        }
        else
        {
            Console.WriteLine($"Error deleting: {response.StatusCode}");

        }

    }



    private async Task UpdateStatus(int id, bool newStatus)
    {

        var patchDocument = new JsonPatchDocument<Todo>();
        patchDocument.Replace(t => t.IsCompleted, newStatus);


        // var jsonContent = JsonContent.Create(patchDocument);
        // Console.WriteLine(await jsonContent.ReadAsStringAsync());


        var response = await Http.PatchAsJsonAsync($"https://localhost:7215/api/JsonHelperTodo/{id}", patchDocument.Operations);
        if (response.IsSuccessStatusCode)
        {

        }
        else
        {
            Console.WriteLine($"Error {response.StatusCode}");
        }
    }



    public class Todo
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public bool IsCompleted { get; set; }
    }
}
